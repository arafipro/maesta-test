---
description: 
globs: 
alwaysApply: false
---
## コーチングAIエージェント ウェブアプリ 画面設計書（MVP版）

**1. 画面一覧（MVP）**

- **1.1. 新規登録画面:** アカウントを作成する画面。
- **1.2. ログイン画面:** 登録済みのアカウントでログインする画面。
- **1.3. コーチングセッション画面:** AIコーチと対話し、履歴を閲覧するメイン画面。

**2. 画面遷移図（MVP）**

```mermaid
graph LR
    A[未認証状態] -- /register --> B(新規登録画面);
    A -- /login --> C(ログイン画面);
    B -- 登録成功 --> C;
    B -- ログインはこちら --> C;
    C -- ログイン成功 --> D(コーチングセッション画面);
    C -- 新規登録はこちら --> B;
    D -- ログアウト --> C;

    %% 認証が必要なページへのアクセス
    A -- /chat (アクセス試行) --> C;
```

- 未認証ユーザーは `/register`, `/login` にアクセス可能。
- 認証が必要な `/chat` などにアクセスしようとすると、ログイン画面（`/login`）にリダイレクトされる（NextAuth.jsの機能）。
- 登録成功後はログイン画面へ遷移することを想定。
- ログイン成功後はコーチングセッション画面へ遷移。
- ログアウトするとログイン画面へ遷移。

**3. 各画面詳細**

- **3.1. 新規登録画面**

  - **画面ID:** `RegisterPage`
  - **URLパス:** `/register`
  - **概要:** ユーザーがメールアドレスとパスワードを入力して、新しいアカウントを作成するためのフォーム画面。
  - **レイアウト・主要要素:**
    - 画面中央に配置されたカード（`<Card>`）
      - カードヘッダー（`<CardHeader>`）:
        - タイトル（`<CardTitle>`）:「新規登録」
      - カードコンテンツ（`<CardContent>`）
        - メールアドレス入力欄:ラベル（`<Label>`）と入力フィールド（`<Input type="email">`）
        - パスワード入力欄:ラベル（`<Label>`）と入力フィールド（`<Input type="password">`）
        - 確認用パスワード入力欄（任意）:ラベル（`<Label>`）と入力フィールド（`<Input type="password">`）
        - 登録ボタン（`<Button type="submit">`）:フォーム全体を送信
        - エラーメッセージ表示エリア（APIエラーやバリデーションエラー用）
      - カードフッター（`<CardFooter>`）:
        - ログイン画面へのリンク:「すでにアカウントをお持ちですか？\<Link href="/login"\>ログイン\</Link\>」
  - **主要コンポーネント（shadcn/ui 例）:** `Card`, `CardHeader`, `CardTitle`, `CardContent`, `CardFooter`, `Label`, `Input`, `Button`
  - **操作と遷移:**
    - **フォーム入力:** 各入力フィールドにバリデーションを設定（空でないか、メール形式か、パスワード強度など）。
    - **登録ボタンクリック:**
      - フロントエンドバリデーションを実行。
      - バリデーションOKなら、`POST /api/auth/register` を呼び出し。
      - **成功時:** ログイン画面（`/login`）へ遷移、または「登録が完了しました。ログインしてください」のようなメッセージを表示。
      - **失敗時:** エラーメッセージ表示エリアに理由（例:メールアドレス重複、サーバーエラー）を表示。
    - **ログイン画面へのリンククリック:** `/login` へ画面遷移。

- **3.2. ログイン画面**

  - **画面ID:** `LoginPage`
  - **URLパス:** `/login`
  - **概要:** 登録済みユーザーがメールアドレスとパスワードでログインするためのフォーム画面。
  - **レイアウト・主要要素:**
    - 画面中央に配置されたカード（`<Card>`）
      - カードヘッダー（`<CardHeader>`）:
        - タイトル（`<CardTitle>`）:「ログイン」
      - カードコンテンツ（`<CardContent>`）
        - メールアドレス入力欄:ラベル（`<Label>`）と入力フィールド（`<Input type="email">`）
        - パスワード入力欄:ラベル（`<Label>`）と入力フィールド（`<Input type="password">`）
        - ログインボタン（`<Button type="submit">`）:フォーム全体を送信（NextAuth.jsの `signIn（'credentials', {...}）` をトリガー）
        - エラーメッセージ表示エリア（認証失敗時）
      - カードフッター（`<CardFooter>`）:
        - 新規登録画面へのリンク:「アカウントをお持ちでないですか？\<Link href="/register"\>新規登録\</Link\>」
  - **主要コンポーネント（shadcn/ui 例）:** `Card`, `CardHeader`, `CardTitle`, `CardContent`, `CardFooter`, `Label`, `Input`, `Button`
  - **操作と遷移:**
    - **フォーム入力:** メールアドレス、パスワードを入力。
    - **ログインボタンクリック:**
      - NextAuth.jsの `signIn` 関数を `credentials` プロバイダーで呼び出し（入力されたメールアドレス、パスワードを渡す）。
      - **成功時:** NextAuth.jsがセッションを作成し、コーチングセッション画面（`/chat` または設定されたリダイレクト先）へ自動的に遷移させる。
      - **失敗時:** NextAuth.jsからエラー情報が返り、エラーメッセージ表示エリアに「メールアドレスまたはパスワードが正しくありません」などを表示。
    - **新規登録画面へのリンククリック:** `/register` へ画面遷移。

- **3.3. コーチングセッション画面**

  - **画面ID:** `ChatPage`
  - **URLパス:** `/chat`（認証後リダイレクト先）
  - **概要:** AIコーチと対話を行い、その履歴を閲覧するアプリケーションのメイン画面。
  - **レイアウト・主要要素:**
    - **ヘッダー:**
      - アプリケーション名またはロゴ
      - ログアウトボタン（`<Button variant="outline">ログアウト</Button>`）
    - **メインエリア:** 画面の高さいっぱいに広がる想定（`flex flex-col h-screen` などで調整）
      - **対話履歴表示エリア（`flex-grow overflow-y-auto`）:**
        - スクロール可能な領域（`<ScrollArea>`）
        - 内部にメッセージリストを表示。
        - 各メッセージ:
          - 送信者（You / AI Coach）の区別（例:アイコン `<Avatar>` や背景色）
          - メッセージ内容（`<p>`）
          - 送信日時（任意、`xx:xx` 形式など）
        - 履歴は `GET /api/messages` から取得したデータを表示。新しいメッセージはリストの末尾に追加され、自動的にスクロールすることが望ましい。
      - **メッセージ入力エリア（画面下部 `p-4 border-t` など）:**
        - 横長のテキスト入力欄（`<Textarea placeholder="メッセージを入力...">`）:入力に応じて高さを自動調整する機能があると良い。Shift+Enterで改行、Enterで送信などの挙動を検討。
        - 送信ボタン（`<Button>送信</Button>`）:テキスト入力欄の右隣に配置。入力が空の場合は非活性化（`disabled`）。
  - **主要コンポーネント（shadcn/ui 例）:** `Button`, `ScrollArea`, `Textarea`, `Avatar`（任意）, `Card`（メッセージ表示に使用も可）
  - **操作と遷移:**
    - **画面表示時:**
      - `GET /api/messages` を呼び出し、過去の対話履歴を取得して表示エリアに描画。
    - **メッセージ入力 & 送信ボタンクリック:**
      - 入力されたメッセージを状態管理（例:`useState`）。
      - 入力メッセージを履歴表示エリアに即時反映（ユーザー発言として）。
      - `POST /api/messages` を呼び出し（入力メッセージを送信）。
      - API呼び出し中は入力欄や送信ボタンを一時的に無効化し、ローディング表示を出すと親切。
      - APIからAIの応答が返ってきたら、それを履歴表示エリアに反映（AI発言として）。
      - 入力欄をクリアする。
    - **ログアウトボタンクリック:**
      - NextAuth.jsの `signOut` 関数を呼び出す。
      - ログイン画面（`/login`）へ遷移。
