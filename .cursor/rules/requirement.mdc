---
description: 
globs: 
alwaysApply: false
---
## コーチングAIエージェント ウェブアプリ 要件定義書（MVP版）

**1. 概要**

- **1.1. プロジェクト名:** コーチングAIエージェントWebアプリ開発プロジェクト（MVP）
- **1.2. プロジェクトの目的・背景:**
  - **MVPの目的:** AIコーチングエージェントとの対話というコア機能が、ターゲットユーザーに受け入れられ、価値を提供できるかを迅速に検証する。
  - **最終的な目的:** ユーザーが自己成長や目標達成に向けて、AIコーチングエージェントとの対話を通じて、内省を深める。具体的な行動計画を立て、実行することを支援するウェブアプリケーションを提供する。
- **1.3. ターゲットユーザー:**
  - 自己成長に関心のある個人
  - 目標達成に向けてサポートを求めているビジネスパーソン、学生など
  - コーチングに興味はあるが、費用や時間の制約で利用できていない層
- **1.4. 開発方針:**
  - MVC（Minimum Viable Coaching / Component）アプローチを採用し、コア機能のみを実装したMVPを早期にリリースする。
  - ユーザーフィードバックに基づき、機能の改善・追加を段階的に行う。
  - 開発リソースを集中させ、早期撤退の判断も可能なようにする。
- **1.5. 用語定義:**
  - **AIコーチ:** OpenAI APIまたはCloudflare Workers AIを利用して構築された、ユーザーとの対話を行うAI。
  - **コーチングセッション:** ユーザーとAIコーチが特定のテーマについて対話を行う一連のやり取り。

**2. MVPの機能要件**

- **2.1. ユーザー認証機能**
  - ユーザーはメールアドレスとパスワードでアカウントを作成し、ログインできること。（NextAuth.jsを利用）
  - 認証状態はセキュアに管理されること。
  - _MVPではソーシャルログイン、パスワードリセットは対象外とする可能性がある。_
- **2.2. 基本的なコーチングセッション機能**
  - ログイン後、ユーザーはAIコーチとテキストベースで対話を開始・継続できること。
  - AIコーチは、ユーザーの発言に対してコーチング的な応答を生成すること。（OpenAI API / Cloudflare Workers AIを利用）
  - 対話の文脈（直近の数ターン程度）を維持すること。
  - 送信されたメッセージとAIからの応答は画面に表示されること。
- **2.3. 対話履歴の保存・表示機能**
  - ユーザーとAIコーチの対話内容は、ユーザーごとに時系列でデータベースに保存されること。（Cloudflare D1を利用）
  - ユーザーは自身の過去の対話履歴を簡易的なリスト形式で閲覧できること。（セッションごとの区切りや詳細な検索はMVPでは必須としない）

**3. MVP対象外とする主な機能（将来的な拡張候補）**

- 目標設定・管理機能
- アクションプラン作成・管理機能
- 進捗記録・可視化機能
- 詳細な対話履歴の検索・フィルタリング機能
- セッションテーマの選択機能
- プロフィール（ニックネーム、アイコン等）の詳細設定機能
- パスワードリセット機能
- ソーシャルログイン機能
- 通知機能

**4. 非機能要件（MVPでとくに考慮すべき点）**

- **4.1. パフォーマンス:**
  - AIの応答生成が主なボトルネックになる可能性があるため、ユーザーが待てる範囲の応答時間を目標とする。非同期処理を適切に行う。
  - フロントエンドの基本的な表示は軽快であること。
- **4.2. セキュリティ:**
  - ユーザー認証、対話データの保存に関して、基本的なセキュリティ対策（パスワードハッシュ化、HTTPS通信、適切なDBアクセス制御）はMVP段階でも必須とする。
  - APIキーは安全に管理する。（Cloudflare Workers Secrets等を利用）
- **4.3. 可用性・信頼性:**
  - Cloudflare Workers/D1の基本的な可用性に依存する。
  - 致命的なエラー（ログインできない、対話がまったくできない）が発生しないように基本的なエラーハンドリングは実装する。
- **4.4. 保守性:**
  - MVPであっても、将来的な拡張を見据え、整理されたコード構成（Next.js, TypeScriptの標準的なプラクティス）を心がける。
- **4.5. UI/UX:**
  - MVPでは機能が限定されるため、シンプルで迷わないUIを目指す。
  - shadcn/uiのコンポーネントを活用し、最低限の体裁を整える。
- **4.6. 運用・監視:**
  - Cloudflareの基本的なログや分析機能で、最低限のエラー発生状況やアクセス状況を把握できるようにする。

**5. 制約事項**

- **5.1. 開発環境:**
  - 言語：TypeScript
  - フレームワーク：Next.js（App Router）
  - スタイル：Tailwind CSS, shadcn/ui
  - バックエンド：Mastra（Cloudflare Workers上で動作）
  - データベース：Cloudflare D1
  - 認証：NextAuth.js
  - AI/ML：OpenAI API, Cloudflare Workers AI（どちらか、または併用）
- **5.2. デプロイ環境:**
  - Cloudflare Workers
- **5.3. 外部サービス依存:**
  - OpenAI APIまたはCloudflare Workers AIの利用料金、利用制限、API仕様変更の影響を受ける可能性がある。
  - Cloudflareの各サービス（Workers, D1, Pagesなど）の仕様、制限、料金体系に準拠する。
